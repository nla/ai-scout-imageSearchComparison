<%- include('../common/header') ; -%>


<%- include('../common/testSearchForm') ; -%>

<% 
  function show(heading, val, suppressBR) {
    if (val) return ((suppressBR) ? "" : "<BR>") + ((heading) ? (heading + ": ") : "") + val ;
    else return "" ;
  }

  function genImageSrc(id) {
    let im = id.replace('https://nla.gov.au', '/static/pics')
            .replace('http://nla.gov.au', '/static/pics')
            .replace("/image", ".jpg")
            .replace("/representativeImage", ".jpg") ;
    // something like   /static/pics/nla.obj-161515917.jpg
    let i = im.indexOf('/nla.obj-') ;
    let j = im.indexOf('.jpg') ;
    let idd = Number(im.substring(i+9, j)) ;
    let subDir = idd % 1000 ;
    return im.substring(0, i) + "/" + subDir + im.substring(i) ;
  }

  function formatDoc(docs, len, seq, descSource) {
    if (seq >= len) {
      if (seq == 0) return "<TD>no results</TD>" ;
      return "<TD></TD>" ;
    }
    let doc = docs[seq] ;

    let desc = ["<B>" + doc.metadataText[0] + "</B>"]  ;
    if (doc.metadataText.length > 2)  // sheesh - they repeat for some reason
      for (let i = 2;i<1+doc.metadataText.length/2;i++) desc.push(doc.metadataText[i]) ;

    let descAI = "" ;
    if (descSource) 
      descAI =  ((descSource == 'p') ? ("Phi-3: " + doc.msVisionDescription) : ("OpenAI: " + doc.openAIDescription)) ;

    return "<TD>" +
      /*
            "id: " + doc.id + "<BR>" +
            "title: " + doc.title + "<BR>" +
            "bibId: " + doc.bibId + "<BR>" +
            "metadataText: " + doc.metadataText.join("\n") + "<BR>" +
            "originalDescription: " + doc.originalDescription + "<BR>" +
            "openAIDescription: " + doc.openAIDescription + "<BR>" +    
            "msVisionDescription: " + doc.msVisionDescription + "<BR>" +
              */
             
            "<IMG src='" + genImageSrc(doc.id) + "' class='medSizeImage' style='float:left;width:350px'>" +
              descAI +
            "<BR clear='all'>" + // doc.title 
              desc.join("<BR/>") +
              "<BR/>Score: " + doc.score +
            "</TD>" ;
  }
  function showDocs(a, b, aDescSource, bDescSource) {

    let aLen = (a) ? a.length : 0 ;
    let bLen = (b) ? b.length : 0 ;

    let maxLen = Math.max(aLen, bLen) ;

    if (maxLen == 0) return "<TR><TD>No results</TD></TR>" ;

    let rows = [] ;
    for (let i=0;i<=maxLen;i++) {
      let row = "<TR valign='top'>" ;
      row += formatDoc(a, aLen, i, aDescSource) ;
      row += formatDoc(b, bLen, i, bDescSource) ;

      rows.push(row + "</TR>") ;
    }
    return rows.join("\n") ;
}

function getSearchedDescription(sets, id) { // return 'o' if openAi, 'p' is phi, null otherwise

  if (sets[id].desc) {
    if (sets[id].desc.includes("OpenAI")) return 'o' ;
    if (sets[id].desc.includes("Phi-3")) return 'p' ;
    return null ;
  }
  for (let i=1;i<10;i++) {
    let pb = "blend" + i ;
    if (!sets[id].hasOwnProperty(pb + "Perc")) break ;
    if (sets[sets[id][pb + "Id"]].desc.includes("OpenAI")) return 'o' ;
    if (sets[sets[id][pb + "Id"]].desc.includes("Phi-3")) return 'p' ;
  }
  return null ;
}

function showHeading(sets, id) {

  if (sets[id].desc) return sets[id].desc ;

  let parts = [] ;
  for (let i=1;i<10;i++) {
    let pb = "blend" + i ;
    if (!sets[id].hasOwnProperty(pb + "Perc")) break ;
    parts.push(sets[id][pb + "Perc"] + "% of " + sets[sets[id][pb + "Id"]].desc) ;
  }

  return parts.join(" and <BR/>") ;
}


%>
<div id="results">

  <% if (aRes) {  %>

    <TABLE CELLSPACING="10">
      <TR valign="top">
        <TH width="45%">
          Set A: <%- showHeading(abSets, a) %>
        </TH>
        <TH  width="45%">
          Set B: <%- showHeading(abSets, b) %>
        </TH>
      </TR>

     
        <%- showDocs(aRes.docs, bRes.docs, getSearchedDescription(abSets, a), getSearchedDescription(abSets, b)) %>
      
    </TABLE>
  <% } %>
</div>

<%- include('../common/footer') ; -%>


<%- include('../common/header') ; -%>

<style>

.vertical-header span {
  writing-mode: vertical-rl;
  transform: rotate(225deg);
  text-align: left;
  vertical-align: bottom;
  max-height: 150px;
}


</style>
<div class="indent">

  <H3>Evaluation results</H3>

    <% 
 
    let colours = ["8C8CEE","9898EF","A4A4F1","B1B1F2","BDBDF3","C9C9F5","D5D5F6","E2E2F7","EEEEF9", 
                   "FFFFFF",
                   "F9EEEE","F7E2E2","F6D5D5","F5C9C9","F3BDBD","F2B1B1","F1A4A4","EF9898","EE8C8C", "eb7c7c"] ;
    function genScore() {
      return {awin: 0, bwin: 0, ab: 0, anet: 0, bnet: 0, count: 0}
    }

    function flipScore(s) {
      return {awin: s.bwin, bwin:s.awin, ab:s.ab, anet: s.bnet, bnet:s.anet, count:s.count} ;
    }


    const similaritySets = [
  {id:0,  desc: "CLIP", matchField: "imageVector", sseq:0},
  {id:1,  desc: "Catalogue metadata", matchField: "nomicMetadataEmbedding", sseq:1},
  {id:2,  desc: "OpenAI description", matchField:"nomicOpenAIDescriptionEmbedding", sseq:2},
  {id:3,  desc: "Phi-3.5 Vision description", matchField: "nomicMsVision35DescriptionEmbedding", sseq:3}
    ] ;


    const seqToSimilaritySet =   [1, 2, 3, 0] ; // sim sets used in the order we want

    let similarityScores = [] ;
    for (let i=0;i<4;i++) {
      let l = [] ;
      for (let j=0;j<4;j++) l.push(genScore()) ;
      similarityScores.push(l) ;
    } 
 
    // build scores
    for (let eval of imageEvals) {
      
      let a = -1 ; let b = -1 ;

      if (eval.methodA < eval.methodB) {
        a = eval.methodA ;
        b = eval.methodB ;
      }
      else {  // swap
        a = eval.methodB ;
        b = eval.methodA ;
        if (eval.eval != "ab") {  // swap
          if (eval.eval.startsWith("a")) eval.eval = "b" + eval.eval.substring(1) ;
          else eval.eval = "a" + eval.eval.substring(1) ;            
        }
      }

      let score = (eval.eval == "ab") ? 0 : Number(eval.eval.substring(1)) ;
 
      let scores = similarityScores[similaritySets[a].sseq][similaritySets[b].sseq] ;
       
      scores.count++ ;

      if (score == 0) scores.ab++ ;
      else {
        if (eval.eval.startsWith("a")) {
          scores.awin++ ;
          scores.anet += score ;
          scores.bnet -= score ;
        }
        else {
          scores.bwin++ ;
          scores.bnet += score ;
          scores.anet -= score ;
        }
      }         
    }
     
    %>

<H4>Similarity Evaluation, <%=imageEvals.length%> head-to-head contests</H4>

<H5>Head-to-head pure win ratio as a percentage, draws ignored (as if they were not played)</H5>
<TABLE style="border:1px solid rgba(128, 128, 128, 0.199)">

  <TR valign="top">
    <TH>Model to evaluate</TH><TH colspan="4" style="border-bottom: 1px solid grey;">Opponents</TH><TH>&nbsp;&nbsp;</TH><TH>Overall</TH>
  </TR >
  <TR valign='top'>
    <TH></TH>
    <% for (let seq of seqToSimilaritySet) {%>
      <TH style="width:8.5em" xclass="vertical-header"><span><%=similaritySets[seq].desc%></span></TH>
    <%}%>    
  </TR>

  <% for (let r of seqToSimilaritySet) { %>
    <TR valign="top">
      <TD style="height:2em;width:21em"><B><%=similaritySets[r].desc%></B></TD>
      <%
        let totScore = genScore() ;
        for (let c of seqToSimilaritySet) {
          let s = similarityScores[similaritySets[r>c?c:r].sseq][similaritySets[r>c?r:c].sseq] ; 
          if (r > c) s = flipScore(s) ;
                
          if (r != c) {             
            let winPerc = Math.round((s.awin  * 100) / (s.awin + s.bwin)) ;
            let avDiff = (s.anet / s.count ).toFixed(2) ;

            let color = 20 - Math.round(winPerc / (100 / 19)) -1  ;

            totScore.count += s.count ;
            totScore.awin += s.awin ;
            totScore.bwin += s.bwin ;
            totScore.anet += s.anet ;
            totScore.bnet += s.bnet ;
            totScore.ab += s.ab ;
          %>
          <TD style="vertical-align: middle;background-color:#<%=colours[color]%>;"><B><center><%=winPerc%></center></B></TD>

        <%}
          else {%>
              <TD style="vertical-align: middle;background-color:rgba(128, 128, 128, 0.26)"></TD>
         <%}%>
      <%  }      
          // out total
          {
            let winPerc = Math.round((totScore.awin  * 100) / (totScore.awin + totScore.bwin)) ;
            let avDiff = (totScore.anet / totScore.count ).toFixed(2) ;
            let color = 20 - Math.round(winPerc / (100 / 19)) -1  ;
            %>
            <TD></TD><TD style="vertical-align: middle;background-color:#<%=colours[color]%>;"><B><center><%=winPerc%></center></B></TD>
       <% } 
     %>
    </TR>
  <%}%>
</TABLE>


<H5>Head-to-head win ratio as a percentage (footy ladder style where points for a draw are shared)</H5>
<TABLE style="border:1px solid rgba(128, 128, 128, 0.199)">

  <TR valign="top">
    <TH>Model to evaluate</TH><TH colspan="4" style="border-bottom: 1px solid grey;">Opponents</TH><TH>&nbsp;&nbsp;</TH><TH>Overall</TH>
  </TR >
  <TR valign='top'>
    <TH></TH>
    <% for (let seq of seqToSimilaritySet) {%>
      <TH style="width:8.5em" xclass="vertical-header"><span><%=similaritySets[seq].desc%></span></TH>
    <%}%>    
  </TR>

  <% for (let r of seqToSimilaritySet) { %>
    <TR valign="top">
      <TD style="height:2em;width:21em"><B><%=similaritySets[r].desc%></B></TD>
      <%
        let totScore = genScore() ;
        for (let c of seqToSimilaritySet) {
          let s = similarityScores[similaritySets[r>c?c:r].sseq][similaritySets[r>c?r:c].sseq] ; 
          if (r > c) s = flipScore(s) ;
                
          if (r != c) {             
            let winPerc = Math.round(((s.awin + s.ab /2)  * 100) / (s.count)) ;
            let avDiff = (s.anet / s.count ).toFixed(2) ;

            let color = 20 - Math.round(winPerc / (100 / 19)) -1  ;

            totScore.count += s.count ;
            totScore.awin += s.awin ;
            totScore.bwin += s.bwin ;
            totScore.anet += s.anet ;
            totScore.bnet += s.bnet ;
            totScore.ab += s.ab ;
          %>
          <TD style="vertical-align: middle;background-color:#<%=colours[color]%>;"><B><center><%=winPerc%></center></B></TD>

        <%}
          else {%>
            <TD style="vertical-align: middle;background-color:rgba(128, 128, 128, 0.26)"></TD>
         <%}%>
      <%  }      
          // out total
          {
            let winPerc = Math.round(((totScore.awin + totScore.ab / 2) * 100) / (totScore.count)) ;
            let avDiff = (totScore.anet / totScore.count ).toFixed(2) ;
            let color = 20 - Math.round(winPerc / (100 / 19)) -1  ;
            %>
            <TD></TD><TD style="vertical-align: middle;background-color:#<%=colours[color]%>;"><B><center><%=winPerc%></center></B></TD>
       <% } 
     %>
    </TR>
  <%}%>
</TABLE>




<H5>Head-to-head detail</H5>
<TABLE border="1">

  <TR valign="top">
    <TH></TH>
    <% for (let seq of seqToSimilaritySet) {%>
      <TH><%=similaritySets[seq].desc%></TH>
    <%}%>
  </TR>

  <% for (let r of seqToSimilaritySet) { %>
    <TR valign="top">
      <TD nowrap><B><%=similaritySets[r].desc%></B></TD>

      <%for (let c of seqToSimilaritySet) {
         let s = similarityScores[similaritySets[r>c?c:r].sseq][similaritySets[r>c?r:c].sseq] ; 
         if (r > c) s = flipScore(s) ;
        %>
        
          <% if (r != c) { 
            
            let winPerc = Math.round(((s.awin + s.ab / 2) * 100) / s.count) ;
            let avDiff = (s.anet / s.count ).toFixed(2) ;

            let color = 20 - Math.round(winPerc / (100 / 19)) -1  ;
          %>
          <TD style="background-color:#<%=colours[color]%>;">winPerc: <%=winPerc%> avDiff: <%=avDiff%> col: <%= color %> <%=colours[color]%>;</TD>

          <%}
          else {%>
              <TD></TD>
         <%}%>
     <%}%>
    </TR>
  <%}%>
</TABLE>

<H5>Detail</H5>
<TABLE border="1">
  <TR valign="top">
    <TH></TH>
    <% for (let seq of seqToSimilaritySet) {%>
      <TH><%=similaritySets[seq].desc%></TH>
    <%}%>
  </TR>

  <% for (let r of seqToSimilaritySet) { %>
    <TR valign="top">
      <TD nowrap><B><%=similaritySets[r].desc%></B></TD>

      <%for (let c of seqToSimilaritySet) {
         let s = similarityScores[similaritySets[r>c?c:r].sseq][similaritySets[r>c?r:c].sseq] ; 
         if (r > c) s = flipScore(s) ;
        %>
        <TD>
          <% if (r != c) { %>
          Awin: <%=s.awin%> Bwin: <%=s.bwin%> 
          Draw: <%=s.ab%> anet: <%=s.anet%> bnet: <%=s.bnet%> count: <%=s.count%>
          <%}%>

        </TD>
     <%}%>
    </TR>
  <%}%>
</TABLE>


<P>abSimilaritySets</P>
<P><%= JSON.stringify(abSimilaritySets) %></P>

<P>Normalised Data</P>
<OL>
    <% for (let eval of imageEvals) {
        if (true) { //((eval.methodA >= 10 ) && (eval.methodB >= 10 ) ) {
      %>
      <LI>
      <%= JSON.stringify(eval) %>
      </LI>
    <%}}%>
    </OL>

</div>

<%- include('../common/footer') ; -%>
